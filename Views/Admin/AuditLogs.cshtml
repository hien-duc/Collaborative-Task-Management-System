@model IEnumerable<AuditLog>
@{
    ViewData["Title"] = "Audit Logs";
}

<div class="container-fluid py-4">
    <div class="row">
        <!-- Admin Sidebar -->
        <div class="col-md-2 mb-4">
            @await Html.PartialAsync("_AdminSidebar")
        </div>
        
        <!-- Main Content -->
        <div class="col-md-10">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h1 class="h3 mb-0">Audit Logs</h1>
                        <div class="d-flex gap-2">
                            <div class="input-group">
                                <input type="text" id="logSearch" class="form-control" 
                                       placeholder="Search logs..." aria-label="Search logs">
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                            <select id="logFilter" class="form-select" aria-label="Filter logs by action">
                                <option value="">All Actions</option>
                                <option value="Create">Create</option>
                                <option value="Update">Update</option>
                                <option value="Delete">Delete</option>
                                <option value="Login">Login</option>
                                <option value="Logout">Logout</option>
                            </select>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table id="auditLogsTable" class="table table-hover" aria-label="Audit logs table">
                            <thead>
                            <tr>
                                <th scope="col" role="columnheader" aria-sort="none">
                                    <button class="btn btn-link text-decoration-none p-0" onclick="sortTable(0)">
                                        Timestamp
                                        <i class="bi bi-arrow-down-up"></i>
                                    </button>
                                </th>
                                <th scope="col" role="columnheader" aria-sort="none">
                                    <button class="btn btn-link text-decoration-none p-0" onclick="sortTable(1)">
                                        User
                                        <i class="bi bi-arrow-down-up"></i>
                                    </button>
                                </th>
                                <th scope="col" role="columnheader" aria-sort="none">
                                    <button class="btn btn-link text-decoration-none p-0" onclick="sortTable(2)">
                                        Action
                                        <i class="bi bi-arrow-down-up"></i>
                                    </button>
                                </th>
                                <th scope="col" role="columnheader">Details</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var log in Model.OrderByDescending(l => l.Timestamp))
                            {
                                <tr>
                                    <td>
                                        <small class="text-muted">
                                            @log.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")
                                        </small>
                                    </td>
                                    <td>@log.User?.UserName</td>
                                    <td>
                                        <span class="badge bg-@(log.Action switch {
                                                                  "Create" => "success",
                                                                  "Update" => "warning",
                                                                  "Delete" => "danger",
                                                                  "Login" => "info",
                                                                  "Logout" => "secondary",
                                                                  _ => "primary"
                                                              })">@log.Action</span>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-link p-0" 
                                                data-bs-toggle="modal" data-bs-target="#logDetailsModal"
                                                data-log-id="@log.Id"
                                                data-log-timestamp="@log.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")"
                                                data-log-user="@log.User?.UserName"
                                                data-log-action="@log.Action"
                                                data-log-ip="@log.IpAddress"
                                                data-log-details="@log.Details"
                                                aria-label="View details for log @log.Id">
                                            View Details
                                        </button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    </div>

                    <!-- Pagination -->
                    <nav aria-label="Audit logs pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="?page=@(ViewBag.CurrentPage - 1)" 
                                   aria-label="Previous page">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>
                            @for (int i = 1; i <= ViewBag.TotalPages; i++)
                            {
                                <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                                    <a class="page-link" href="?page=@i">@i</a>
                                </li>
                            }
                            <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="?page=@(ViewBag.CurrentPage + 1)" 
                                   aria-label="Next page">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>

<!-- Log Details Modal -->
<div class="modal fade" id="logDetailsModal" tabindex="-1" aria-labelledby="logDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="logDetailsModalLabel">Log Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row mb-0">
                    <dt class="col-sm-4">Timestamp</dt>
                    <dd class="col-sm-8" id="modalTimestamp"></dd>

                    <dt class="col-sm-4">User</dt>
                    <dd class="col-sm-8" id="modalUser"></dd>

                    <dt class="col-sm-4">Action</dt>
                    <dd class="col-sm-8">
                        <span class="badge" id="modalAction"></span>
                    </dd>

                    <dt class="col-sm-4">IP Address</dt>
                    <dd class="col-sm-8" id="modalIp"></dd>

                    <dt class="col-sm-4">Details</dt>
                    <dd class="col-sm-8">
                        <div class="bg-light p-2 rounded">
                            <pre class="mb-0"><code id="modalDetails"></code></pre>
                        </div>
                    </dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle filter form submission via AJAX
        $(document).ready(function () {
            $('#filterForm').on('submit', function (e) {
                e.preventDefault();
                var form = $(this);
                $.get(form.attr('action'), form.serialize(), function (data) {
                    $('#auditLogsTable').html(data);
                });
            });
        });

        // Handle log details modal
        document.getElementById('logDetailsModal')?.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            
            // Extract info from data-* attributes
            const timestamp = button.getAttribute('data-log-timestamp');
            const user = button.getAttribute('data-log-user');
            const action = button.getAttribute('data-log-action');
            const ip = button.getAttribute('data-log-ip');
            const details = button.getAttribute('data-log-details');
            
            // Update the modal's content
            document.getElementById('modalTimestamp').textContent = timestamp;
            document.getElementById('modalUser').textContent = user || 'N/A';
            document.getElementById('modalIp').textContent = ip || 'N/A';
            document.getElementById('modalDetails').textContent = details || 'No details available';
            
            // Set the action badge with appropriate color
            const actionBadge = document.getElementById('modalAction');
            actionBadge.textContent = action;
            
            // Set badge color based on action type
            const actionColors = {
                'Create': 'success',
                'Update': 'warning',
                'Delete': 'danger',
                'Login': 'info',
                'Logout': 'secondary'
            };
            
            // Reset all possible badge classes
            actionBadge.className = 'badge';
            // Add the appropriate color class or default to primary
            actionBadge.classList.add(`bg-${actionColors[action] || 'primary'}`);
        });

        function resetFilters() {
            $('#userId').val('');
            $('#action').val('');
            $('#fromDate').val('');
            $('#toDate').val('');
            $('#filterForm').submit();
        }

        function filterLogs() {
            const searchQuery = logSearch.value.toLowerCase();
            const filterValue = logFilter.value.toLowerCase();
            const table = document.getElementById('auditLogsTable');
            const rows = table.getElementsByTagName('tr');

            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const cells = row.getElementsByTagName('td');
                let shouldShow = false;

                // Check if any cell matches the search query
                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    if (cell.textContent.toLowerCase().includes(searchQuery)) {
                        shouldShow = true;
                        break;
                    }
                }

                // Apply filter
                if (filterValue && cells[2].textContent.trim().toLowerCase() !== filterValue) {
                    shouldShow = false;
                }

                row.style.display = shouldShow ? '' : 'none';
            }
        }


        function sortTable(columnIndex) {
            const table = document.getElementById('auditLogsTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                const aValue = a.cells[columnIndex].textContent.trim();
                const bValue = b.cells[columnIndex].textContent.trim();
                return aValue.localeCompare(bValue);
            });

            // Clear existing rows
            while (tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }

            // Add sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
}