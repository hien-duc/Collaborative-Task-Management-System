@model Collaborative_Task_Management_System.Models.ViewModels.ProjectDetailsViewModel
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = Model.Project.Title;
}

<div class="container py-4 project-page">
    <div class="card mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="card-title h2 mb-0">@Model.Project.Title</h1>
                <div class="btn-group">
                    @if (User.IsInRole("Manager") || User.IsInRole("Admin") || 
                         Model.Project.CreatedBy.Id == User.Identity.GetUserId())
                    {
                        <a asp-action="Edit" asp-route-id="@Model.Project.Id" class="btn btn-warning">
                            <i class="bi bi-pencil"></i> Edit Project
                        </a>
                    }
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Back to List
                    </a>
                </div>
            </div>

            <div class="row g-4">
                <div class="col-md-8">
                    <div class="mb-4">
                        <h6 class="text-muted mb-2">Description</h6>
                        <p class="mb-0">@Model.Project.Description</p>
                    </div>

                    <div class="row mb-4">
                        <div class="col-sm-6 col-lg-3">
                            <h6 class="text-muted mb-2">Deadline</h6>
                            <p class="mb-0">@Model.Project.Deadline.ToString("MM/dd/yyyy")</p>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <h6 class="text-muted mb-2">Priority</h6>
                            <span class="badge bg-@(Model.Project.Priority == "High" ? "danger" : 
                                                Model.Project.Priority == "Medium" ? "warning" : "info")">@Model.Project.Priority</span>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <h6 class="text-muted mb-2">Status</h6>
                            <span class="badge bg-@(Model.Project.Status == ProjectStatus.Completed ? "success" : 
                                                Model.Project.Status == ProjectStatus.Active ? "warning" : "primary")">@Model.Project.Status</span>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <h6 class="text-muted mb-2">Created By</h6>
                            <p class="mb-0">@(string.IsNullOrEmpty(Model.Project.CreatedBy.FullName) ? Model.Project.CreatedBy.UserName : Model.Project.CreatedBy.FullName)</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Team Members Section -->
    <div class="card mb-4">
        <div class="card-body p-3 team-members-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="h4 mb-0">Team Members</h2>
                @if (Model.IsManager || User.IsInRole("Admin"))
                {
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMemberModal" 
                            aria-label="Add team member">
                        <i class="bi bi-person-plus"></i> Add Member
                    </button>
                }
            </div>
            
            <div id="team-members-container">
                <partial name="_TeamMembers" model="Model" />
            </div>
        </div>
    </div>

    <!-- Tasks Section -->
    <div class="card mb-4">
        <div class="card-body p-3">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h4 mb-0">Tasks</h2>
                @if (Model.IsManager || User.IsInRole("Admin"))
                {
                    <a asp-controller="Tasks" asp-action="Create" asp-route-projectId="@Model.Project.Id" class="btn btn-primary">
                        <i class="bi bi-plus"></i> Add Task
                    </a>
                }
            </div>

            @if (Model.Tasks != null && Model.Tasks.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" aria-label="Project tasks table">
                        <thead>
                        <tr>
                            <th scope="col" aria-label="Task title">Title</th>
                            <th scope="col" aria-label="Task assignee">Assignee</th>
                            <th scope="col" aria-label="Task status">Status</th>
                            <th scope="col" aria-label="Task priority">Priority</th>
                            <th scope="col" aria-label="Task due date">Due Date</th>
                            <th scope="col" aria-label="Task comments">Comments</th>
                            <th scope="col" aria-label="Task actions">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var task in Model.Tasks)
                        {
                            <tr>
                                <td>
                                    <a href="#" data-bs-toggle="collapse" data-bs-target="#task-@task.Id" aria-expanded="false" aria-controls="task-@task.Id">
                                        @task.Title
                                    </a>
                                </td>
                                <td>
                                    @if (task.AssignedTo != null)
                                    {
                                        @(string.IsNullOrEmpty(task.AssignedTo.FullName) ? task.AssignedTo.UserName : task.AssignedTo.FullName)
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unassigned</span>
                                    }
                                </td>
                                <td>
                                    @if (Model.IsManager || User.IsInRole("Admin") ||
                                         task.AssignedToId == User.Identity.GetUserId())
                                    {
                                        <select class="form-select form-select-sm task-status-select" data-task-id="@task.Id" aria-label="Change task status">
                                            @if (task.Status == TaskStatus.ToDo)
                                            {
                                                <option value="ToDo" selected>To Do</option>
                                            }
                                            else
                                            {
                                                <option value="ToDo">To Do</option>
                                            }
    
                                            @if (task.Status == TaskStatus.InProgress)
                                            {
                                                <option value="InProgress" selected>In Progress</option>
                                            }
                                            else
                                            {
                                                <option value="InProgress">In Progress</option>
                                            }
    
                                            @if (task.Status == TaskStatus.Completed)
                                            {
                                                <option value="Completed" selected>Completed</option>
                                            }
                                            else
                                            {
                                                <option value="Completed">Completed</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <span class="badge bg-@(task.Status == TaskStatus.Completed ? "success" :
                                                              task.Status == TaskStatus.InProgress ? "warning" : "secondary")">@task.Status</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-@(task.Priority == "High" ? "danger" :
                                                          task.Priority == "Medium" ? "warning" : "info")">@task.Priority</span>
                                </td>
                                <td>@task.DueDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <button class="btn btn-sm btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#task-@task.Id" aria-expanded="false" aria-controls="task-@task.Id" aria-label="View comments for task @task.Title">
                                        <i class="bi bi-chat-dots"></i> View Comments (@(task.Comments != null ? task.Comments.Count : 0))
                                    </button>
                                </td>
                                <td>
                                    @if (Model.IsManager || User.IsInRole("Admin") || task.AssignedToId == User.Identity.GetUserId())
                                    {
                                        <a asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-warning me-1" aria-label="Edit task">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a>
                                    }
                                    @if (Model.IsManager || User.IsInRole("Admin"))
                                    {
                                        <a asp-controller="Tasks" asp-action="Delete" asp-route-id="@task.Id" class="btn btn-sm btn-danger" aria-label="Delete task">
                                            <i class="bi bi-trash"></i> Delete
                                        </a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td colspan="6" class="p-0">
                                    <div class="collapse" id="task-@task.Id">
                                        <div class="card card-body border-0 bg-light">
                                            <div class="mb-3">
                                                <h6 class="mb-2">Description</h6>
                                                <p class="mb-0">@(string.IsNullOrEmpty(task.Description) ? "No description provided" : task.Description)</p>
                                            </div>
                                            <!-- Comments Section -->
                                            <div class="mb-4">
                                                <h6 class="mb-3">Comments</h6>
                                                <div class="comments-container mb-3">
                                                    @if (task.Comments != null && task.Comments.Any())
                                                    {
                                                        foreach (var comment in task.Comments.OrderByDescending(c => c.CreatedAt))
                                                        {
                                                            <div class="card mb-2" role="article" aria-label="Comment by @(string.IsNullOrEmpty(comment.User.FullName) ? comment.User.UserName : comment.User.FullName)">
                                                                <div class="card-body py-2 px-3">
                                                                    <p class="mb-1">@comment.Text</p>
                                                                    <small class="text-muted">@(string.IsNullOrEmpty(comment.User.FullName) ? comment.User.UserName : comment.User.FullName) - @comment.CreatedAt.ToString("MM/dd/yyyy HH:mm")</small>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <p class="text-muted">No comments yet</p>
                                                    }
                                                </div>
                                                <form asp-controller="Comments" asp-action="Create" method="post" class="comment-form">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="TaskId" value="@task.Id"/>
                                                    <div class="form-group mb-2">
                                                        <label for="comment-@task.Id" class="visually-hidden">Add a comment</label>
                                                        <textarea id="comment-@task.Id" name="Content" class="form-control" rows="3" placeholder="Add a comment..." required maxlength="1000" aria-describedby="comment-help-@task.Id" aria-label="Add comment for task @task.Title"></textarea>
                                                        <small id="comment-help-@task.Id" class="form-text text-muted d-flex justify-content-end">Maximum 1000 characters</small>
                                                    </div>
                                                    <button type="submit" class="btn btn-primary btn-sm">
                                                        <i class="bi bi-chat-dots"></i> Post Comment
                                                    </button>
                                                </form>
                                            </div>

                                            <!-- File Attachments Section -->
                                            <div>
                                                <h6 class="mb-3">Attachments</h6>
                                                @if (task.FileAttachments != null && task.FileAttachments.Any())
                                                {
                                                    <ul class="list-group mb-3" aria-label="File attachments for task">
                                                        @foreach (var attachment in task.FileAttachments)
                                                        {
                                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                <a href="@Url.Action("DownloadFile", "Tasks", new { id = attachment.Id })" class="text-decoration-none" aria-label="Download @attachment.FileName">
                                                                    <i class="bi bi-file-earmark"></i> @attachment.FileName
                                                                </a>
                                                                <small class="text-muted">@attachment.UploadedAt.ToString("MM/dd/yyyy")</small>
                                                            </li>
                                                        }
                                                    </ul>
                                                }
                                                else
                                                {
                                                    <p class="text-muted mb-3">No attachments yet</p>
                                                }
                                                <form asp-controller="Tasks" asp-action="UploadFile" method="post" enctype="multipart/form-data">
                                                    <input type="hidden" name="TaskId" value="@task.Id"/>
                                                    <div class="input-group mb-3">
                                                        <label for="file-upload-@task.Id" class="visually-hidden">Upload file</label>
                                                        <input type="file" id="file-upload-@task.Id" name="file" class="form-control" required aria-describedby="file-help-@task.Id">
                                                        <button class="btn btn-primary" type="submit">
                                                            <i class="bi bi-upload"></i> Upload File
                                                        </button>
                                                    </div>
                                                    <small id="file-help-@task.Id" class="form-text text-muted">Upload a file attachment for this task</small>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add Member Modal -->
@if (Model.IsManager || User.IsInRole("Admin"))
{
    <div class="modal fade" id="addMemberModal" tabindex="-1" aria-labelledby="addMemberModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMemberModalLabel">Add Team Member</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="AddMember" asp-route-projectId="@Model.Project.Id" method="post">
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label for="modalUserId" class="form-label">Select User</label>
                            <select name="userId" id="modalUserId" class="form-select" required aria-describedby="modalUserIdHelp">
                                <option value="">-- Select User --</option>
                                @foreach (var user in Model.AvailableUsers)
                                {
                                    <option value="@user.Value">@user.Text</option>
                                }
                            </select>
                            <div id="modalUserIdHelp" class="form-text">Select a user to add to this project</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-person-plus"></i> Add Member
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Handle task status updates
        document.querySelectorAll('.task-status-select').forEach(select => {
            select.addEventListener('change', function() {
                const taskId = this.dataset.taskId;
                const newStatus = this.value;
                const statusCell = this.closest('td');
                
                // Show loading indicator
                const originalContent = statusCell.innerHTML;
                statusCell.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';

                fetch(`/Tasks/UpdateStatus/${taskId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(newStatus)
                })
                .then(response => response.json())
                .then(data => {
                    // Restore original content
                    statusCell.innerHTML = originalContent;
                    
                    if (data.success) {
                        notificationSystem.showNotification('Task status updated successfully', 'success');
                        // Update the select value in case it was reset during the loading state
                        select.value = newStatus;
                    } else {
                        notificationSystem.showNotification('Failed to update task status', 'danger');
                    }
                })
                .catch(error => {
                    // Restore original content
                    statusCell.innerHTML = originalContent;
                    
                    console.error('Error:', error);
                    notificationSystem.showNotification('An error occurred while updating task status', 'danger');
                });
            });
        });
        
        // Initialize event handlers for team member actions
        function initializeTeamMemberActions() {
            // Add confirmation for member removal
            document.querySelectorAll('.remove-member-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const projectId = this.dataset.projectId;
                    const userId = this.dataset.userId;
                    const memberName = this.closest('tr').querySelector('td:first-child').textContent;
                    
                    if (confirm(`Remove ${memberName} from project?`)) {
                        removeMember(projectId, userId);
                    }
                });
            });
            
            // Handle add member form submission
            document.querySelectorAll('.add-member-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const projectId = this.dataset.projectId;
                    const userId = this.querySelector('select[name="userId"]').value;
                    
                    if (!userId) {
                        notificationSystem.showNotification('Please select a user', 'warning');
                        return;
                    }
                    
                    addMember(projectId, userId);
                });
            });
        }
        
        // Function to remove a member via AJAX
        function removeMember(projectId, userId) {
            const teamMembersContainer = document.getElementById('team-members-container');
            teamMembersContainer.innerHTML = '<div class="d-flex justify-content-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            
            
            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/Projects/RemoveMember/?projectId=${projectId}&userId=${userId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (response.ok) {
                    // Refresh the team members section
                    refreshTeamMembers(projectId);
                    notificationSystem.showNotification('Team member removed successfully', 'success');
                } else {
                    throw new Error('Failed to remove team member');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                notificationSystem.showNotification('An error occurred while removing the team member', 'danger');
                refreshTeamMembers(projectId);
            });
        }
        
        // Function to add a member via AJAX
        function addMember(projectId, userId) {
            const teamMembersContainer = document.getElementById('team-members-container');
            teamMembersContainer.innerHTML = '<div class="d-flex justify-content-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            
            const formData = new FormData();
            formData.append('projectId', projectId);
            formData.append('userId', userId);
            
            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/Projects/AddMember/${projectId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    // Refresh the team members section
                    refreshTeamMembers(projectId);
                    notificationSystem.showNotification('Team member added successfully', 'success');
                    
                    // Reset the select dropdown
                    document.querySelectorAll('select[name="userId"]').forEach(select => {
                        select.selectedIndex = 0;
                    });
                    
                    // Close modal if open
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addMemberModal'));
                    if (modal) {
                        modal.hide();
                    }
                } else {
                    throw new Error('Failed to add team member');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                notificationSystem.showNotification('An error occurred while adding the team member', 'danger');
                refreshTeamMembers(projectId);
            });
        }
        
        // Function to refresh the team members section
        function refreshTeamMembers(projectId) {
            const teamMembersContainer = document.getElementById('team-members-container');
            
            fetch(`/Projects/GetTeamMembers/?projectId=${projectId}`)
            .then(response => response.text())
            .then(html => {
                teamMembersContainer.innerHTML = html;
                initializeTeamMemberActions();
            })
            .catch(error => {
                console.error('Error:', error);
                teamMembersContainer.innerHTML = '<div class="alert alert-danger">Failed to load team members</div>';
            });
        }
        
        // Initialize team member actions when the page loads
        initializeTeamMemberActions();
    </script>
}