@model Collaborative_Task_Management_System.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}
<style>
        .dashboard-update-alert {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            min-width: 300px;
        }
        
        .spinner {
            display: inline-block;
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
</style>

<div class="container-fluid mt-4 dashboard-container">
    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Projects</h5>
                    <h2 class="card-text total-projects">@Model.TotalProjects</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Tasks</h5>
                    <h2 class="card-text total-tasks">@Model.TotalTasks</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">Completed Tasks</h5>
                    <h2 class="card-text completed-tasks">@Model.CompletedTasks</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <h5 class="card-title">Completion Rate</h5>
                    <h2 class="card-text completion-rate">@Model.OverallCompletionRate.ToString("F1")%</h2>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <!-- Tasks Column -->
        <div class="col-md-6 mb-3">
            <!-- My Tasks Section -->
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Tasks</h5>
                    <!-- Project Filter Form -->
                    <form asp-action="Dashboard" method="get" class="d-flex align-items-center project-filter-form">
                        <div class="me-2">
                            <select name="projectId" class="form-select form-select-sm" aria-label="Filter by project" onchange="this.form.submit()">
                                @if (ViewData["Projects"] != null)
                                {
                                    @foreach (var project in ViewData["Projects"] as List<SelectListItem>)
                                    {
                                        if (project.Selected)
                                        {
                                            <option value="@project.Value" selected>@project.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@project.Value">@project.Text</option>
                                        }
                                    }
                                }
                                else
                                {
                                    <option value="">All Projects</option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary btn-sm" aria-label="Apply filter">
                            <i class="bi bi-filter"></i> Filter
                        </button>
                    </form>
                </div>
                <div class="card-body">
                    @if (!Model.Tasks.Any())
                    {
                        <div class="alert alert-info" role="alert">
                            <i class="bi bi-info-circle me-2"></i> No tasks found.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col" aria-label="Task title">Title</th>
                                        <th scope="col" aria-label="Project name">Project</th>
                                        <th scope="col" aria-label="Task status">Status</th>
                                        <th scope="col" aria-label="Actions">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in Model.Tasks.OrderBy(t => t.DueDate))
                                    {
                                        <tr>
                                            <td>
                                                <a href="/Tasks/Details/@task.Id" class="text-decoration-none">@task.Title</a>
                                            </td>
                                            <td>
                                                <a href="/Projects/Details/@task.ProjectId" class="text-decoration-none">@task.Project?.Title</a>
                                            </td>
                                            <td>
                                                <select class="form-select form-select-sm task-status-select"
                                                        data-task-id="@task.Id"
                                                        aria-label="Change task status">
                                                    @foreach (TaskStatus status in Enum.GetValues(typeof(TaskStatus)))
                                                    {
                                                        if (task.Status == status)
                                                        {
                                                            <option value="@status" selected>@status</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@status">@status</option>
                                                        }
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("Edit", "Tasks", new { id = task.Id })" class="btn btn-warning btn-sm" aria-label="Edit task">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Analytics Column -->
        <div class="col-md-6 mb-3">
            <!-- Task Status Chart -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Task Status Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="taskStatusChart"></canvas>
                </div>
            </div>

            <!-- Project Progress Chart -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Project Progress</h5>
                </div>
                <div class="card-body">
                    <canvas id="projectProgressChart" aria-label="Project progress chart" role="img"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Task Status Chart
        var taskStatusCtx = document.getElementById('taskStatusChart').getContext('2d');
        var taskStatusChart = new Chart(taskStatusCtx, {
            type: 'doughnut',
            data: {
                labels: ['To Do', 'In Progress', 'Under Review', 'Completed', 'Blocked'],
                datasets: [{
                    data: [
                        @Model.TaskStatusSummary.ToDoCount,
                        @Model.TaskStatusSummary.InProgressCount,
                        @Model.TaskStatusSummary.UnderReviewCount,
                        @Model.TaskStatusSummary.CompletedCount,
                        @Model.TaskStatusSummary.BlockedCount
                    ],
                    backgroundColor: [
                        'rgba(108, 117, 125, 0.7)',  // secondary - To Do
                        'rgba(13, 110, 253, 0.7)',  // primary - In Progress
                        'rgba(13, 202, 240, 0.7)',  // info - Under Review
                        'rgba(25, 135, 84, 0.7)',   // success - Completed
                        'rgba(220, 53, 69, 0.7)'    // danger - Blocked
                    ],
                    borderColor: [
                        'rgba(108, 117, 125, 1)',
                        'rgba(13, 110, 253, 1)',
                        'rgba(13, 202, 240, 1)',
                        'rgba(25, 135, 84, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Project Progress Chart
        var projectProgressCtx = document.getElementById('projectProgressChart').getContext('2d');
        var projectProgressChart = new Chart(projectProgressCtx, {
            type: 'bar',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.ProjectProgress.Select(p => $"'{p.ProjectTitle}'").ToArray()))],
                datasets: [{
                    label: 'Completion %',
                    data: [@string.Join(",", Model.ProjectProgress.Select(p => p.CompletionPercentage))],
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                }
            }
        });

        // Task Status Update via AJAX
        $(function() {
            // Use setTimeout to ensure DOM is fully loaded and processed
            setTimeout(function() {
                const taskStatusSelects = $('.task-status-select');
                console.log('Found task status selects:', taskStatusSelects.length);
                
                if (taskStatusSelects.length > 0) {
                    taskStatusSelects.each(function() {
                        console.log('Binding to select:', this.dataset.taskId);
                    });
                    
                    taskStatusSelects.on('change', function() {
                        const taskId = $(this).data('task-id');
                        const newStatus = $(this).val();
                        const $select = $(this);
                        
                        console.log('Status change detected for task:', taskId, 'New status:', newStatus);
                        
                        // Show loading indicator
                        $select.prop('disabled', true);
                        
                        // Get the anti-forgery token
                        const token = $('input[name="__RequestVerificationToken"]').val();
                        
                        $.ajax({
                            url: `/Tasks/UpdateStatus/${taskId}`,
                            type: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            data: JSON.stringify(newStatus),
                            success: function(data) {
                                console.log('Status update response:', data);
                                if (data.success) {
                                    notificationSystem.showNotification('Task status updated successfully', 'success');
                                    // Update the select value in case it was reset during loading
                                    $select.val(newStatus);
                                } else {
                                    notificationSystem.showNotification(data.message || 'Failed to update task status', 'danger');
                                }
                            },
                            error: function(xhr, status, error) {
                                console.error('Error:', error);
                                notificationSystem.showNotification('An error occurred while updating task status', 'danger');
                            },
                            complete: function() {
                                $select.prop('disabled', false);
                            }
                        });
                    });
                } else {
                    console.warn('No task status selects found on the page');
                }
            }, 500); // Small delay to ensure everything is loaded
        });

        // Function to update dashboard data
        function updateDashboardData() {
            // Show loading indicator
            var loadingAlert = $('<div class="alert alert-info dashboard-update-alert" role="alert"><i class="bi bi-arrow-repeat spinner"></i> Updating dashboard data...</div>');
            $('.dashboard-container').prepend(loadingAlert);
            
            $.ajax({
                url: '/Home/GetDashboardData',
                type: 'GET',
                success: function(data) {
                    // Update summary cards
                    $('.total-projects').text(data.totalProjects);
                    $('.total-tasks').text(data.totalTasks);
                    $('.completed-tasks').text(data.completedTasks);
                    $('.completion-rate').text(data.overallCompletionRate.toFixed(1) + '%');
                    
                    // Update task status chart
                    taskStatusChart.data.datasets[0].data = [
                        data.taskStatusSummary.toDoCount,
                        data.taskStatusSummary.inProgressCount,
                        data.taskStatusSummary.underReviewCount,
                        data.taskStatusSummary.completedCount,
                        data.taskStatusSummary.blockedCount
                    ];
                    taskStatusChart.update();
                    
                    // Update project progress chart
                    projectProgressChart.data.labels = data.projectProgress.map(p => p.projectTitle);
                    projectProgressChart.data.datasets[0].data = data.projectProgress.map(p => p.completionPercentage);
                    projectProgressChart.update();
                    
                    // Show success message and remove loading indicator
                    loadingAlert.removeClass('alert-info').addClass('alert-success')
                        .html('<i class="bi bi-check-circle"></i> Dashboard updated successfully!');
                    
                    // Remove the alert after 3 seconds
                    setTimeout(function() {
                        loadingAlert.fadeOut('slow', function() { $(this).remove(); });
                    }, 3000);
                },
                error: function() {
                    // Show error message and remove loading indicator
                    loadingAlert.removeClass('alert-info').addClass('alert-danger')
                        .html('<i class="bi bi-exclamation-triangle"></i> Failed to update dashboard data.');
                    
                    // Remove the alert after 5 seconds
                    setTimeout(function() {
                        loadingAlert.fadeOut('slow', function() { $(this).remove(); });
                    }, 5000);
                }
            });
        }
    </script>
}