@model Collaborative_Task_Management_System.Models.ViewModels.TaskSearchViewModel
@{
    ViewData["Title"] = "Tasks";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Tasks</h1>
        <a asp-controller="Tasks" asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i> Create New Task
        </a>
    </div>

    <!-- Search Panel -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Search Tasks</h5>
        </div>
        <div class="card-body">
            <form id="searchForm" method="post" asp-action="Search">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="query" name="Query" value="@Model.Query" placeholder="Search...">
                            <label for="query">Search</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="status" name="Status">
                                <option value="">All Statuses</option>
                                <option value="0" selected="@(Model.Status == TaskStatus.ToDo)">To Do</option>
                                <option value="1" selected="@(Model.Status == TaskStatus.InProgress)">In Progress</option>
                                <option value="2" selected="@(Model.Status == TaskStatus.UnderReview)">Under Review</option>
                                <option value="3" selected="@(Model.Status == TaskStatus.Completed)">Completed</option>
                                <option value="4" selected="@(Model.Status == TaskStatus.Blocked)">Blocked</option>
                            </select>
                            <label for="status">Status</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="projectId" name="ProjectId">
                                <option value="">All Projects</option>
                                @foreach (var project in ViewBag.Projects ?? new List<SelectListItem>())
                                {
                                    <option value="@project.Value" selected="@(Model.ProjectId.ToString() == project.Value)">@project.Text</option>
                                }
                            </select>
                            <label for="projectId">Project</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input type="date" class="form-control" id="fromDate" name="FromDate" value="@(Model.FromDate?.ToString("yyyy-MM-dd"))">
                            <label for="fromDate">From Date</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <input type="date" class="form-control" id="toDate" name="ToDate" value="@(Model.ToDate?.ToString("yyyy-MM-dd"))">
                            <label for="toDate">To Date</label>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating">
                            <select class="form-select" id="assigneeId" name="AssigneeId">
                                <option value="">All Assignees</option>
                                @foreach (var user in ViewBag.Users ?? new List<SelectListItem>())
                                {
                                    <option value="@user.Value" selected="@(Model.AssigneeId == user.Value)">@user.Text</option>
                                }
                            </select>
                            <label for="assigneeId">Assignee</label>
                        </div>
                    </div>
                    <div class="col-12 text-end">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-search"></i> Search
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            <i class="bi bi-x-circle"></i> Clear
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results -->
    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Results</h5>
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-sort-down"></i> Sort
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="sortDropdown">
                    <li><a class="dropdown-item sort-option" href="#" data-sort="duedate" data-desc="false">Due Date (Ascending)</a></li>
                    <li><a class="dropdown-item sort-option" href="#" data-sort="duedate" data-desc="true">Due Date (Descending)</a></li>
                    <li><a class="dropdown-item sort-option" href="#" data-sort="title" data-desc="false">Title (A-Z)</a></li>
                    <li><a class="dropdown-item sort-option" href="#" data-sort="title" data-desc="true">Title (Z-A)</a></li>
                    <li><a class="dropdown-item sort-option" href="#" data-sort="status" data-desc="false">Status</a></li>
                    <li><a class="dropdown-item sort-option" href="#" data-sort="priority" data-desc="true">Priority</a></li>
                </ul>
            </div>
        </div>
        <div class="card-body">
            <div id="taskResults">
                @if (Model.Tasks != null && Model.Tasks.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Project</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Due Date</th>
                                    <th>Assignee</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in Model.Tasks)
                                {
                                    <tr>
                                        <td>
                                            <a href="@Url.Action("Details", new { id = task.Id })" class="text-decoration-none fw-bold">@task.Title</a>
                                        </td>
                                        <td>@task.Project?.Title</td>
                                        <td>
                                            <span class="badge bg-@(task.Status switch {
                                                TaskStatus.ToDo => "secondary",
                                                TaskStatus.InProgress => "primary",
                                                TaskStatus.UnderReview => "info",
                                                TaskStatus.Completed => "success",
                                                TaskStatus.Blocked => "danger",
                                                _ => "secondary"
                                            })">@task.Status</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-@(task.Priority == "High" ? "danger" : 
                                                                task.Priority == "Medium" ? "warning" : "info")">@task.Priority</span>
                                        </td>
                                        <td>@task.DueDate.ToString("MMM dd, yyyy")</td>
                                        <td>@(task.AssignedTo?.FullName ?? "Unassigned")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("Edit", new { id = task.Id })" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                <a href="@Url.Action("Details", new { id = task.Id })" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-eye"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.Page - 1, query = Model.Query, status = Model.Status, projectId = Model.ProjectId, fromDate = Model.FromDate, toDate = Model.ToDate, assigneeId = Model.AssigneeId, sortBy = Model.SortBy, sortDescending = Model.SortDescending })" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <li class="page-item @(i == Model.Page ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = i, query = Model.Query, status = Model.Status, projectId = Model.ProjectId, fromDate = Model.FromDate, toDate = Model.ToDate, assigneeId = Model.AssigneeId, sortBy = Model.SortBy, sortDescending = Model.SortDescending })">@i</a>
                                    </li>
                                }
                                <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = Model.Page + 1, query = Model.Query, status = Model.Status, projectId = Model.ProjectId, fromDate = Model.FromDate, toDate = Model.ToDate, assigneeId = Model.AssigneeId, sortBy = Model.SortBy, sortDescending = Model.SortDescending })" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i> No tasks found matching your criteria.
                    </div>
                }
            </div>
        </div>
        <div class="card-footer text-muted">
            Showing @(Model.Tasks?.Count() ?? 0) of @Model.TotalTasks tasks
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle sort options
            $('.sort-option').click(function(e) {
                e.preventDefault();
                const sortBy = $(this).data('sort');
                const sortDesc = $(this).data('desc');
                
                // Add hidden fields to the form
                $('#searchForm').append(`<input type="hidden" name="SortBy" value="${sortBy}" />`);
                $('#searchForm').append(`<input type="hidden" name="SortDescending" value="${sortDesc}" />`);
                
                // Submit the form
                $('#searchForm').submit();
            });
            
            // AJAX form submission
            $('#searchForm').submit(function(e) {
                e.preventDefault();
                
                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: JSON.stringify($(this).serializeArray().reduce(function(obj, item) {
                        obj[item.name] = item.value;
                        return obj;
                    }, {})),
                    contentType: 'application/json',
                    success: function(result) {
                        $('#taskResults').html(result);
                    },
                    error: function(error) {
                        console.error('Error:', error);
                    }
                });
            });
        });
    </script>
}