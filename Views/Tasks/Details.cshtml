@model TaskItem
@{
    ViewData["Title"] = "Task Details";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">@Model.Title</h1>
                    <span class="badge bg-@(Model.Status switch {
                        TaskStatus.ToDo => "secondary",
                        TaskStatus.InProgress => "primary",
                        TaskStatus.UnderReview => "info",
                        TaskStatus.Completed => "success",
                        TaskStatus.Blocked => "danger",
                        _ => "secondary"
                    })">@Model.Status</span>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5 class="text-muted mb-2">Project</h5>
                            <p><a href="@Url.Action("Details", "Projects", new { id = Model.ProjectId })" class="text-decoration-none">@Model.Project?.Title</a></p>
                        </div>
                        <div class="col-md-6">
                            <h5 class="text-muted mb-2">Assigned To</h5>
                            <p>@(Model.AssignedTo?.FullName ?? "Unassigned")</p>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5 class="text-muted mb-2">Due Date</h5>
                            <p>@Model.DueDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="col-md-6">
                            <h5 class="text-muted mb-2">Priority</h5>
                            <p>
                                <span class="badge bg-@(Model.Priority == "High" ? "danger" : 
                                                Model.Priority == "Medium" ? "warning" : "info")">
                                    @Model.Priority
                                </span>
                            </p>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h5 class="text-muted mb-2">Description</h5>
                        <p class="mb-0">@(string.IsNullOrEmpty(Model.Description) ? "No description provided" : Model.Description)</p>
                    </div>
                    
                    @if (Model.FileAttachments != null && Model.FileAttachments.Any())
                    {
                        <div class="mb-4">
                            <h5 class="text-muted mb-2">Attachments</h5>
                            <div class="list-group">
                                @foreach (var attachment in Model.FileAttachments)
                                {
                                    <a href="@Url.Action("DownloadFile", "Tasks", new { id = attachment.Id })" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                        <div>
                                            <i class="bi bi-file-earmark"></i> @attachment.FileName
                                            <small class="text-muted ms-2">(@(attachment.FileSize / 1024) KB)</small>
                                        </div>
                                        <span class="badge bg-primary rounded-pill">Download</span>
                                    </a>
                                }
                            </div>
                        </div>
                    }
                    
                    <div class="d-flex justify-content-between mt-4">
                        <a href="@Url.Action("Details", "Projects", new { id = Model.ProjectId })" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Back to Project
                        </a>
                        <div>
                            <a href="@Url.Action("Edit", "Tasks", new { id = Model.Id })" class="btn btn-warning me-2">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteTaskModal">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Comments Section -->
            @await Html.PartialAsync("_TaskComments", Model)
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteTaskModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this task? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>